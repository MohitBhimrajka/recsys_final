// frontend/src/pages/DemoPage.tsx
import React, { useState, useCallback, useRef } from 'react';
import UserSelector from '../components/UserSelector';
import RecommendationList from '../components/RecommendationList';
import ErrorMessage from '../components/ErrorMessage';
import SkeletonCard from '../components/SkeletonCard';
import { fetchRecommendations, fetchRandomUser } from '../services/recommendationService';
import { RecommendationItem } from '../types';
import { motion, AnimatePresence } from 'framer-motion';
import { FiRefreshCw, FiHelpCircle } from 'react-icons/fi';

const DemoPage: React.FC = () => {
  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);
  const [recommendations, setRecommendations] = useState<RecommendationItem[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [isFetchingRandom, setIsFetchingRandom] = useState<boolean>(false);
  const userSelectorRef = useRef<any>(null); // Ref for react-select instance

  // Removed useEffect for pre-fetching

  // --- Fetch Recommendations Logic ---
  const handleUserSelect = useCallback(async (userId: number | null) => {
    if (userId === null) {
        setSelectedUserId(null);
        setRecommendations([]);
        setError(null);
        setIsLoading(false);
        return;
    }
    const numericUserId = parseInt(String(userId), 10);
    if (isNaN(numericUserId)) {
        setError("Invalid User ID selected.");
        return;
    }
    console.log("Fetching recommendations for user:", numericUserId);
    setSelectedUserId(numericUserId);
    setIsLoading(true);
    setError(null);
    setRecommendations([]);
    try {
      const fetchedRecommendations = await fetchRecommendations(numericUserId, 9);
      setRecommendations(fetchedRecommendations);
      setError(null);
    } catch (err: unknown) {
        console.error("API call failed:", err);
        let message = "An unknown error occurred while fetching recommendations.";
        if (err instanceof Error) {
             message = `Failed to fetch recommendations: ${err.message}. Please check the API server and try again.`;
        }
        setError(message);
        setRecommendations([]);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // --- Handle Random User Click ---
  const handleRandomUser = useCallback(async () => {
    setIsFetchingRandom(true);
    setError(null);
    setRecommendations([]);
    setSelectedUserId(null);
     if (userSelectorRef.current?.select) {
        userSelectorRef.current.select.setValue(null, 'clear');
     }
    try {
        console.log("Fetching random user from API...");
        const randomUser = await fetchRandomUser();
        if (randomUser) {
            const randomId = randomUser.student_id;
            console.log(`Received random user ID: ${randomId}`);
            if (userSelectorRef.current?.select) {
               userSelectorRef.current.select.setValue({ value: randomId, label: String(randomId) }, 'select-option');
             } else { console.warn("Could not set UserSelector value programmatically via ref."); }
            setTimeout(() => handleUserSelect(randomId), 50);
        } else { throw new Error("API did not return a random user."); }
    } catch (err: unknown) {
        console.error("Failed to select random user:", err);
        let message = "Could not select a random user.";
        if (err instanceof Error) { message = `Error selecting random user: ${err.message}`; }
        setError(message);
        setSelectedUserId(null);
        setRecommendations([]);
         if (userSelectorRef.current?.select) { userSelectorRef.current.select.clearValue(); }
    } finally {
        setIsFetchingRandom(false);
    }
  }, [handleUserSelect]);

  // --- Animation Variants ---
  const contentVariants = {
    hidden: { opacity: 0, y: 20, scale: 0.98 },
    visible: { opacity: 1, y: 0, scale: 1, transition: { duration: 0.5, ease: "easeOut" } },
    exit: { opacity: 0, scale: 0.95, transition: { duration: 0.2, ease: "easeIn" } }
  };

  return (
    <div className="container mx-auto px-4 py-16 md:py-24 max-w-7xl">
      <header className="text-center mb-10 md:mb-16 max-w-3xl mx-auto">
        <motion.h1
             className="text-3xl md:text-4xl lg:text-5xl font-bold text-text-primary mb-4"
             initial={{ opacity: 0, y: -10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}
        >
          Interactive Recommendation Demo
        </motion.h1>
        <motion.p
            className="text-text-secondary mb-6 md:text-lg" // Slightly larger text
            initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5, delay: 0.2 }}
        >
           Explore course suggestions generated by our Item-Based Collaborative Filtering model. Select a student ID from the OULAD training set below, or let us pick one randomly for you.
        </motion.p>
         <motion.p
            className="text-xs text-text-muted"
            initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5, delay: 0.4 }}
         >
             The recommendations reflect courses similar to those the chosen student (and their peers) previously engaged with.
        </motion.p>
      </header>

      {/* User Selection Area */}
       <motion.div
          className="max-w-xl mx-auto mb-16"
          initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5, delay: 0.6 }}
        >
           <UserSelector
             ref={userSelectorRef}
             onUserSelect={handleUserSelect}
             isLoading={isLoading || isFetchingRandom}
            />
           <div className="text-center mt-5">
                <motion.button
                    onClick={handleRandomUser}
                    disabled={isFetchingRandom || isLoading}
                    className="btn btn-secondary text-sm disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center mx-auto shadow-lg"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                >
                    <FiRefreshCw size={16} className={`mr-2 ${isFetchingRandom ? 'animate-spin' : ''}`} />
                    {isFetchingRandom ? 'Selecting...' : 'Try a Random Student'}
                </motion.button>
           </div>
       </motion.div>


      {/* Results Area */}
      <div className="mt-10 md:mt-14 min-h-[450px] relative">
        <AnimatePresence mode="wait">
          {/* Loading State */}
          {isLoading && selectedUserId && (
            <motion.div key="loading" variants={contentVariants} initial="hidden" animate="visible" exit="exit" className="w-full">
               <h2 className="text-xl font-semibold mb-8 text-center text-text-muted animate-pulse">
                  Loading Recommendations for Student <span className='font-bold text-primary'>{selectedUserId}</span>...
              </h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8">
                {Array.from({ length: 6 }).map((_, index) => ( <SkeletonCard key={`skel-${index}`} /> ))}
              </div>
            </motion.div>
          )}

          {/* Error State */}
          {!isLoading && error && (
            <motion.div key="error" variants={contentVariants} initial="hidden" animate="visible" exit="exit">
              <ErrorMessage message={error} />
            </motion.div>
          )}

          {/* Results State */}
          {!isLoading && !error && selectedUserId && (
            <motion.div key={`results-${selectedUserId}`} variants={contentVariants} initial="hidden" animate="visible" exit="exit">
              <RecommendationList
                recommendations={recommendations}
                selectedUserId={selectedUserId}
              />
              {/* Context section removed */}
            </motion.div>
          )}

          {/* Initial State */}
          {!isLoading && !error && !selectedUserId && (
             <motion.div key="initial" variants={contentVariants} initial="hidden" animate="visible" exit="exit">
                 <p className="text-center text-text-muted mt-16 text-lg">
                    Please search for and select a student ID, or use the random button above to view recommendations.
                </p>
             </motion.div>
          )}

        </AnimatePresence>
      </div>
    </div>
  );
}

export default DemoPage;